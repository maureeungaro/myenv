
echo Loading Functions

# to use: add the “\(user.badge)” to your Badge in your profile "General"
# notice: subdirs should go on top of the list in regards to the mother dir
function iterm2_print_user_vars() {
# this would use an env variable badge to display the badge
	iterm2_set_user_var badge $badge
	iterm2_set_user_var gitBranch "$((git branch 2> /dev/null) | grep \* | cut -c3-)"
	iterm2_set_user_var gitDiff   "$((git diff --shortstat  2> /dev/null) )"
}

# to edit badge:
# iterm preferences > General > Badge
# colors: 
function inspiration() {
	local quotes=(
	'Your attention is your biggest superpower'
	'Reception is how we acknowledge others when they offer us their vulnerability'
	'Silence is one of the great arts of conversation'
	'Unleash creativity. Do not be afraid of being wrong.'
	'You will continue to suffer if you have an emotional reaction to everything that is said to you.'
	'True power is sitting back and observing things with logic. True power is restraint.'
	'If words control you that means everyone else can control you.'
	'The key is not to prioritize what’s on your schedule, but to schedule your priorities.'
	'One day you will be a memory to some people. Do your best to be a good one.'
	)

	DIFF=${#quotes[@]}
	R=$(($(($RANDOM%$DIFF))))
	INDEX=$(( $R + 1 ))
	export badge=$quotes[$INDEX]
}

# just prints the arguments
demo1 () {
	for b in $@
	do
		echo demo1 $b
	done
}

demo2 () {
	echo argument1: $1, argument2: $2
}

mountCVMFS() {
#!/bin/zsh
for x in oasis.opensciencegrid.org singularity.opensciencegrid.org sft.cern.ch
do
    if mount | grep $x >& /dev/null
    then
    else
        sudo mount -t cvmfs $x /cvmfs/$x
    fi
done
}

# separate because clas12/2.4 loads java 1.8
loadJDKCoatjavaCVMFS () {
	source /cvmfs/oasis.opensciencegrid.org/jlab/hallb/clas12/soft/setup.sh
	module unload clas12
	module load jdk/11.0.8
	module load coatjava/6.5.9
}


loadCLAS12CVMFS () {
	source /cvmfs/oasis.opensciencegrid.org/jlab/hallb/clas12/soft/setup.sh
	module load clas12/2.4
}


dsu () {
	cd /opt/projects/simDistribution/SubMit
}

dge () {
	cd /opt/projects/gemc
}

dge () {
	cd /opt/projects/gemc
}

myb () {
	cd /opt/mybacini
}


# use the f expansion flag to split on newlines
gia () {
	filesToDelete=("${(@f)$(git status -s | grep \? | awk '{print $2}')}")
	echo Deleting $filesToDelete
	rm $filesToDelete
}


giad () {
	filesToDelete=("${(@f)$(git status -s | grep \? | awk '{print $2}')}")
	echo Deleting $filesToDelete
	rm -rf $filesToDelete
}

# git committing and pushing
gpush() {
	echo
	comment=$@
	git commit -a -m"$comment"
	git push
}

gzipAll() {
	filesToZip=("${(@f)$(\ls)}")
	for f in $filesToZip
	do
		echo Compressing $f
		gzip $f
	done

}

function countArguments() {
	echo "${#@}"
}

function replaceLineInFileContaining () {
	filename=$1
	lineContent=$2
	lineReplacing=$3

	header=$(grep -B1000 $lineContent $filename  | grep -v $lineContent)
	footer=$(grep -A1000 $lineContent $filename  | grep -v $lineContent)

	rm -f tmpFile

	echo $header         > tmpFile
	echo $lineReplacing >> tmpFile
	echo $footer        >> tmpFile

	echo Filename: $filename
	echo Content of line to replace: $filename
	echo Line replacing the content: $lineReplacing

	mv tmpFile $filename
}


function dockerPruneImages () {
	docker image prune -a -f
}


function dockerRemoveAllImages () {
	imagesToRemove=(${(f)"$(docker images | grep -v CREATED | awk '{print $3}')"})
	echo
	echo Images to be removed: $imagesToRemove

	for c in $imagesToRemove
	do
		echo removing imaget:  $c
		docker rmi -f $c
	done

}


function dockerRemoveAllContainers () {
	containersToRemove=(${(f)"$(docker container ls -a | grep -v CREATED | awk '{print $NF}')"})
	echo
	echo Containers to be removed: $containersToRemove

	for c in $containersToRemove
	do
		echo removing container:  $c
		docker container rm -f $c
	done
}

function dockerList () {
	echo
	echo Docker images:
	docker images
	echo
	echo Docker Containers:
	docker container ls -a

}

function importBookmarks () {
	rm -f bookmarks.html
	echo '<!DOCTYPE NETSCAPE-Bookmark-file-1>"'                                    > bookmarks.html
	echo '<HTML> '                                                                >> bookmarks.html
	echo '	<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8"> ' >> bookmarks.html
	echo '	<Title>Bookmarks</Title> '                                            >> bookmarks.html
	echo '	<H1>Bookmarks</H1> '                                                  >> bookmarks.html
	echo '	<DL><p> '                                                             >> bookmarks.html

	for b in $@
	do
		echo importing $b
		cat $b >> bookmarks.html
	done
	# cause I'm a sucker for indentation
	sed -i '' s/'<DT>'/'		<DT>/'   bookmarks.html
	sed -i '' s/'<\/DT>'/'		<\/DT>/' bookmarks.html

	echo '	<DL><p> '                                                             >> bookmarks.html
	echo '<HTML> '                                                                >> bookmarks.html

}

function dockImages() {

	# this function will not work if the commented lines below have error.
	# for example if /Applications/Utilities/Icon* is not there, even if rm is given -f option, the whole script won't work
	# previously this was confused with this working only in bash

    echo

	echo xcode
	$(/Users/$chi/newStartw/SetFileIcon -image "/Users/$chi/Dropbox/work/icons/code.png"         -file  "/Users/$chi/xcodelinks")
	echo chat
	$(/Users/$chi/newStartw/SetFileIcon -image "/Users/$chi/Dropbox/work/icons/chat.png"         -file  "/Applications/Chat")
	echo productivity
	$(/Users/$chi/newStartw/SetFileIcon -image "/Users/$chi/Dropbox/work/icons/pie.png"          -file  "/Applications/Productivity")
	echo system
	$(/Users/$chi/newStartw/SetFileIcon -image "/Users/$chi/Dropbox/work/icons/settings.png"     -file  "/Applications/System")
	echo utils
	$(/Users/$chi/newStartw/SetFileIcon -image "/Users/$chi/Dropbox/work/icons/util.png"         -file  "/Applications/Utils")
	echo honeymoney
	$(/Users/$chi/newStartw/SetFileIcon -image "/Users/$chi/Dropbox/work/icons/honeymoney.png"   -file  "/Users/$chi/Library/Mobile Documents/com~apple~Numbers/Documents/Honey")

	echo 
	echo Sometimes one need to restart dock using:
	echo killall Dock
	echo
	echo done

	# removing icons if there
	# to be finalized
	# extraIcons=("/Applications/Utilities/Icon?")
	
	# if [ ! -f "/Applications/System/Icon*" ]; then
	# 	echo "File not found!"
	# else
	# 		echo "File found!"
	# fi
	# rm -f /Applications/Utilities/Icon*
	# rm -f /Applications/System/Icon*
	# rm -f /Applications/Utils/Icon*
	# rm -f /Applications/Productivity/Icon*
	# rm -f /Applications/Chat/Icon*

}

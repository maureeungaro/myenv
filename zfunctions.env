
echo Loading Functions


# just prints the arguments
demo1 () {
	echo argument list: $@
}

demo2 () {
	echo argument1: $1, argument2: $2
}

# use the f expansion flag to split on newlines
gia () {
	filesToDelete=("${(@f)$(git status -s | grep \? | awk '{print $2}')}")
	echo Deleting $filesToDelete
	rm $filesToDelete
}


giad () {
	filesToDelete=("${(@f)$(git status -s | grep \? | awk '{print $2}')}")
	echo Deleting $filesToDelete
	rm -rf $filesToDelete
}

# git committing and pushing
gpush() {
	echo
	comment=\'$@\'
	echo git pushing with comment: -m\'$@\'
	git commit -a -m$comment
}

gzipAll() {
	filesToZip=("${(@f)$(\ls)}")
	for f in $filesToZip
	do
		echo Compressing $f
		gzip $f
	done

}

function countArguments() {
	echo "${#@}"
}


function replaceLineInFileContaining () {
	filename=$1
	lineContent=$2
	lineReplacing=$3
	
	header=$(grep -B1000 $lineContent $filename  | grep -v $lineContent)
	footer=$(grep -A1000 $lineContent $filename  | grep -v $lineContent)
	
	rm -f tmpFile
	
	echo $header         > tmpFile
	echo $lineReplacing >> tmpFile
	echo $footer        >> tmpFile
	
	echo Filename: $filename
	echo Content of line to replace: $filename
	echo Line replacing the content: $lineReplacing
	
	mv tmpFile $filename
}


function dockerPruneImages () {
	docker image prune -a -f
}


function dockerRemoveAllImages () {
	imagesToRemove=(${(f)"$(docker images | grep -v CREATED | awk '{print $3}')"})
	echo
	echo Images to be removed: $imagesToRemove
	
	for c in $imagesToRemove
	do
		echo removing imaget:  $c
		docker rmi -f $c
	done
			
}


function dockerRemoveAllContainers () {
	containersToRemove=(${(f)"$(docker container ls -a | grep -v CREATED | awk '{print $NF}')"})
	echo
	echo Containers to be removed: $containersToRemove
	
	for c in $containersToRemove
	do
		echo removing container:  $c
		docker container rm -f $c
	done
			

function dockerList () {
	echo
	echo Docker images:
	docker images
	echo
	echo Docker Containers:
	docker container ls -a

}


}

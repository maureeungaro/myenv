
echo Loading Functions

# to use: add the “\(user.badge)” to your Badge in your profile "General"
# notice: subdirs should go on top of the list in regards to the mother dir
function iterm2_print_user_vars() {
# this would use an env variable badge to display the badge
 iterm2_set_user_var badge $badge
}

function inspiration() {
	local quotes=(
	'Your attention is your biggest superpower'
	'Reception is how we acknowledge others when they offer us their vulnerability'
	)

	DIFF=${#quotes[@]}
	R=$(($(($RANDOM%$DIFF))))
	INDEX=$(( $R + 1 ))
	export badge=$quotes[$INDEX]
}

# just prints the arguments
demo1 () {
	for b in $@
	do
		echo demo1 $b
	done
}

demo2 () {
	echo argument1: $1, argument2: $2
}

dsu () {
	cd /opt/projects/simDistribution/SubMit
}

dge () {
	cd /opt/projects/gemc
}

dge () {
	cd /opt/projects/gemc
}

myb () {
	cd /opt/mybacini
}


# use the f expansion flag to split on newlines
gia () {
	filesToDelete=("${(@f)$(git status -s | grep \? | awk '{print $2}')}")
	echo Deleting $filesToDelete
	rm $filesToDelete
}


giad () {
	filesToDelete=("${(@f)$(git status -s | grep \? | awk '{print $2}')}")
	echo Deleting $filesToDelete
	rm -rf $filesToDelete
}

# git committing and pushing
gpush() {
	echo
	comment=$@
	echo git pushing with comment: -m$comment
	git commit -a -m"$comment"
	git push
}

gzipAll() {
	filesToZip=("${(@f)$(\ls)}")
	for f in $filesToZip
	do
		echo Compressing $f
		gzip $f
	done

}

function countArguments() {
	echo "${#@}"
}

function replaceLineInFileContaining () {
	filename=$1
	lineContent=$2
	lineReplacing=$3

	header=$(grep -B1000 $lineContent $filename  | grep -v $lineContent)
	footer=$(grep -A1000 $lineContent $filename  | grep -v $lineContent)

	rm -f tmpFile

	echo $header         > tmpFile
	echo $lineReplacing >> tmpFile
	echo $footer        >> tmpFile

	echo Filename: $filename
	echo Content of line to replace: $filename
	echo Line replacing the content: $lineReplacing

	mv tmpFile $filename
}


function dockerPruneImages () {
	docker image prune -a -f
}


function dockerRemoveAllImages () {
	imagesToRemove=(${(f)"$(docker images | grep -v CREATED | awk '{print $3}')"})
	echo
	echo Images to be removed: $imagesToRemove

	for c in $imagesToRemove
	do
		echo removing imaget:  $c
		docker rmi -f $c
	done

}


function dockerRemoveAllContainers () {
	containersToRemove=(${(f)"$(docker container ls -a | grep -v CREATED | awk '{print $NF}')"})
	echo
	echo Containers to be removed: $containersToRemove

	for c in $containersToRemove
	do
		echo removing container:  $c
		docker container rm -f $c
	done
}

function dockerList () {
	echo
	echo Docker images:
	docker images
	echo
	echo Docker Containers:
	docker container ls -a

}

function importBookmarks () {
	rm -f bookmarks.html
	echo '<!DOCTYPE NETSCAPE-Bookmark-file-1>"'                                    > bookmarks.html
	echo '<HTML> '                                                                >> bookmarks.html
	echo '	<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8"> ' >> bookmarks.html
	echo '	<Title>Bookmarks</Title> '                                            >> bookmarks.html
	echo '	<H1>Bookmarks</H1> '                                                  >> bookmarks.html
	echo '	<DL><p> '                                                             >> bookmarks.html

	for b in $@
	do
		echo importing $b
		cat $b >> bookmarks.html
	done
	# cause I'm a sucker for indentation
	sed -i '' s/'<DT>'/'		<DT>/'   bookmarks.html
	sed -i '' s/'<\/DT>'/'		<\/DT>/' bookmarks.html

	echo '	<DL><p> '                                                             >> bookmarks.html
	echo '<HTML> '                                                                >> bookmarks.html

}


